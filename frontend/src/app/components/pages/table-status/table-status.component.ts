import { Component, OnInit, Inject, PLATFORM_ID, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { TableStatusService } from '../../../service/table-status.service';
import Swal from 'sweetalert2';
import { lastValueFrom } from 'rxjs';
import { isPlatformBrowser } from '@angular/common';
import { LoginService } from '../../../service/login.service';

@Component({
  selector: 'app-table-status',
  standalone: false,
  templateUrl: './table-status.component.html',
  styleUrl: './table-status.component.css'
})
export class TableStatusComponent implements OnInit {
  qrCodes: { [key: number]: any } = {};
  tables: any;
  payment: any;
  selectedTable: any = null;
  paymentTotal: number = 0;
  qrCodeUrl: any = null;
  order: any;

  constructor(private tableStatusService: TableStatusService, private sanitizer: DomSanitizer, 
    @Inject(PLATFORM_ID) private platformId: Object, private ngZone: NgZone,
    private loginService: LoginService) {}

  ngOnInit(): void {
    this.tableStatusService.getAllTable().subscribe((res) => {
      this.tables = res;
      console.log(this.tables);
      
      this.tables.forEach((t: any) => {
        if (t.code) {
          // const qrData = `kmitlcafe.sirawit.in.th/ordering/1/${t.code}`;
          const qrData = `https://kmitlcafe.sirawit.in.th:4200/ordering/1/${t.code}`;
          t.url = qrData
          t.image = this.sanitizer.bypassSecurityTrustUrl(
            `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qrData)}&size=200x200`
          ); 
        } else {
          t.image = null
        }
      });
    });

    if (isPlatformBrowser(this.platformId) && typeof window !== 'undefined') {
      this.ngZone.runOutsideAngular(() => {
        setInterval(() => {
            this.ngZone.run(() => {
              this.tableStatusService.getAllPayment().subscribe((res) => {
                this.payment = res;
                  console.log(this.payment);
              });
              this.tableStatusService.getAllOrder().subscribe((res) => {
                this.order = res;
                console.log("Updated Order Data:", this.order);
              });
            });
        }, 3000);
      });
    }  

    this.tableStatusService.getAllPayment().subscribe((res) => {
      this.payment = res;
      console.log(this.payment);
    });

    this.tableStatusService.getAllOrder().subscribe((res) => {
      this.order = res;
      console.log(this.order);
    });
  }

  updateTable(table: any) {
    if (!table.people || Number(table.people) <= 0) {
      Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!', 'error');
      return;
    }
  
    if (!table.status || (table.status !== 'enable' && table.status !== 'disable')) {
      Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!', 'error');
      return;
    }
      this.tableStatusService.updateTableStatus(table).subscribe(
        (res : any) => {
          Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡πÇ‡∏ï‡πä‡∏∞ ${table.table_id} ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß!`, 'success');
          this.tableStatusService.getAllTable().subscribe((res) => {
            this.tables = res;
            console.log(this.tables);
            
            this.tables.forEach((t: any) => {
              if (t.code) {
                // const qrData = `kmitlcafe.sirawit.in.th/ordering/1/${t.code}`;
                const qrData = `https://kmitlcafe.sirawit.in.th:4200/ordering/1/${t.code}`;
                t.url = qrData
                t.image = this.sanitizer.bypassSecurityTrustUrl(
                  `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qrData)}&size=200x200`
                ); 
                console.log(qrData);
              } else {
                t.image = null
              }
            });
          });
        }
      )
  }
  
  setSelectedTable(tableId: number) {
    localStorage.setItem('selectedTableId', tableId.toString());
    console.log(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${tableId}`);
  }

  refreshTableData() {
    this.tableStatusService.getAllTable().subscribe((res) => {
      this.tables = res;
      console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà:", this.tables);
  
      // ‡πÇ‡∏´‡∏•‡∏î QR Code ‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å LocalStorage
      this.tables.forEach((t: any) => {
        const storedCode = localStorage.getItem(`table_qr_${t.table_id}`);
        if (storedCode) {
          // const qrData = `kmitlcafe.sirawit.in.th/ordering/1/${storedCode}`;
          const qrData = `https://kmitlcafe.sirawit.in.th:4200/ordering/1/${storedCode}`;
          this.qrCodes[t.table_id] = this.sanitizer.bypassSecurityTrustUrl(
            `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qrData)}&size=200x200`
          );
        }
      });
    });
  }  
  
  async selectPaymentMethod(table: any) {
    // ‡∏´‡∏≤ payment_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const order = this.order.find((o: any) => o.table_id === table.table_id);
    
    if (!order || !order.payment_id) {
      Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ', 'error');
      return;
    }
  
    const { value: paymentMethod } = await Swal.fire({
      title: 'üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      html: `
        <div style="display: flex; flex-direction: column; gap: 10px;">
          <button id="cashBtn" class="swal2-confirm swal2-styled" style="background-color: #ffcc00; color: #000; padding: 10px;">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</button>
          <button id="creditBtn" class="swal2-confirm swal2-styled" style="background-color: #007bff; color: #fff; padding: 10px;">‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</button>
          <button id="qrBtn" class="swal2-confirm swal2-styled" style="background-color: #28a745; color: #fff; padding: 10px;">QR PromptPay</button>
        </div>
      `,
      showCancelButton: true,
      showConfirmButton: false,
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      didOpen: () => {
        document.getElementById('cashBtn')?.addEventListener('click', () => Swal.close({ value: 'Cash' }));
        document.getElementById('creditBtn')?.addEventListener('click', () => Swal.close({ value: 'CreditCard' }));
        document.getElementById('qrBtn')?.addEventListener('click', () => Swal.close({ value: 'PromptPay' }));
      }
    });
  
    if (paymentMethod) {
      if (paymentMethod === 'PromptPay') {
        await this.openPaymentModal(table, order.payment_id);
      } else {
        await this.processPayment(order.payment_id, paymentMethod);
      }
    }
  }
  
  async processPayment(paymentId: number, paymentMethod: string): Promise<void> {
    console.log('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:', {
      payment_id: paymentId,
      payment_method: paymentMethod
    });
  
    try {
      await lastValueFrom(this.tableStatusService.makePayment(paymentId, paymentMethod));
      Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß!', 'success');
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:', error);
      Swal.fire('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ', 'error');
    }
  }
  
  openPaymentModal(table: any, paymentId: number) {
    console.log("Table ID:", table.table_id, "Payment ID:", paymentId);
  
    return this.tableStatusService.getPaymentTotalByTable(table.table_id).subscribe(
      (res: any) => {
        console.log("Payment Data:", res);
        if (res.total_price) {
          this.paymentTotal = res.total_price;
          const phoneNumber = "0632142555";
          const qrUrl = `https://promptpay.io/${phoneNumber}/${this.paymentTotal}.png`;
  
          this.qrCodeUrl = this.sanitizer.bypassSecurityTrustUrl(qrUrl);
          this.selectedTable = table;
  
          return Swal.fire({
            title: 'üîπ ‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
            html: `<div class="text-center">
                    <p>‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <b>${this.paymentTotal} ‡∏ö‡∏≤‡∏ó</b></p>
                    <img src="${qrUrl}" alt="QR PromptPay" width="200">
                   </div>`,
            showCancelButton: true,
            confirmButtonText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞',
            cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            preConfirm: () => this.processPayment(paymentId, "PromptPay"),
            allowOutsideClick: () => !Swal.isLoading(),
          });
        } else {
          return Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ', 'error');
        }
      },
      (error) => {
        console.error('Error fetching total price:', error);
        return Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ', 'error');
      }
    );
  }  
  
}
